:mod:`klefki.algebra.groups`
============================

.. py:module:: klefki.algebra.groups


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   cycic_group/index.rst
   cyclic_group/index.rst
   ecg/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   klefki.algebra.groups.FiniteCycicGroup
   klefki.algebra.groups.EllipticCurveGroup
   klefki.algebra.groups.EllipicCyclicSubgroup
   klefki.algebra.groups.JacobianGroup



.. py:class:: FiniteCycicGroup(*args)

   Bases: :class:`klefki.algebra.abstract.Group`

   .. attribute:: N
      

      

   .. method:: craft(self, o)


   .. method:: identity(cls)
      :classmethod:

      The value for obeying axiom `identity` (3)


   .. method:: inverse(self)

      Implement for axiom `inverse`


   .. method:: op(self, g)

      The Operator for obeying axiom `associativity` (2)


   .. method:: __pow__(self, times)



.. py:class:: EllipticCurveGroup(*args)

   Bases: :class:`klefki.algebra.abstract.Group`

   .. attribute:: A
      

      

   .. attribute:: B
      

      

   .. method:: craft(self, o)


   .. method:: op(self, g)

      The Operator for obeying axiom `associativity` (2)


   .. method:: inverse(self)

      Implement for axiom `inverse`


   .. method:: identity(cls)
      :classmethod:

      The value for obeying axiom `identity` (3)


   .. method:: x(self)
      :property:


   .. method:: y(self)
      :property:



.. py:class:: EllipicCyclicSubgroup(*args)

   Bases: :class:`klefki.algebra.groups.ecg.EllipticCurveGroup`

   With Lagrange's therem
   the order of a subgroup is a divisor of the order of the parent group

   .. attribute:: N
      

      

   .. method:: scalar(self, times)



.. py:class:: JacobianGroup(*args)

   Bases: :class:`klefki.algebra.abstract.Group`

   .. attribute:: A
      

      

   .. attribute:: B
      

      

   .. method:: craft(self, o)


   .. method:: double(self, n=None)


   .. method:: identity(cls)
      :classmethod:

      The value for obeying axiom `identity` (3)


   .. method:: inverse(self)

      Implement for axiom `inverse`


   .. method:: op(self, g)

      The Operator for obeying axiom `associativity` (2)



