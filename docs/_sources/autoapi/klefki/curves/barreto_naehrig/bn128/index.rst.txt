:mod:`klefki.curves.barreto_naehrig.bn128`
==========================================

.. py:module:: klefki.curves.barreto_naehrig.bn128

.. autoapi-nested-parse::

   ref: https://github.com/ethereum/research/blob/711bd9532b4534ef5ae6277bd7afe625195506d5/zksnark/bn128_field_elements.py



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   klefki.curves.barreto_naehrig.bn128.BN128FP
   klefki.curves.barreto_naehrig.bn128.BN128FP2
   klefki.curves.barreto_naehrig.bn128.BN128FP12
   klefki.curves.barreto_naehrig.bn128.ECGBN128



.. py:class:: BN128FP(*args)

   Bases: :class:`klefki.algebra.fields.FiniteField`

   .. attribute:: P
      

      


.. py:class:: BN128FP2(*args)

   Bases: :class:`klefki.algebra.fields.PolyExtField`

   .. attribute:: F
      

      

   .. attribute:: E
      

      


.. py:class:: BN128FP12(*args)

   Bases: :class:`klefki.algebra.fields.PolyExtField`

   .. attribute:: F
      

      

   .. attribute:: E
      

      

   .. method:: from_fp(cls, v)
      :classmethod:



.. py:class:: ECGBN128(*args)

   Bases: :class:`klefki.algebra.groups.EllipticCurveGroup`

   .. attribute:: A
      

      

   .. attribute:: N
      

      

   .. method:: op(self, g)

      The Operator for obeying axiom `associativity` (2)


   .. method:: twist(self)


   .. method:: twist_FP_to_FP12(cls, x, y)
      :classmethod:


   .. method:: twist_FP2_to_FP12(cls, x, y)
      :classmethod:


   .. method:: linefunc(P1, P2, T)
      :staticmethod:


   .. method:: miller_loop(cls, Q, P)
      :classmethod:


   .. method:: pairing(cls, Q, P)
      :classmethod:

      e(P, Q + R) = e(P, Qj * e(P, R)
      e(P + Q, R) = e(P, R) * e(Q, R)


   .. method:: e(cls, P, Q)
      :classmethod:


   .. method:: is_on_curve(self)


   .. method:: B(self)
      :property:



.. data:: G1
   

   

.. data:: G2
   

   

.. data:: G
   

   

