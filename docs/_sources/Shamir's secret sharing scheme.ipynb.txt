{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Shamir's secret sharing scheme\n",
    "========================="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* ref https://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The essential idea of Adi Shamir's threshold scheme is that 2 points are sufficient to define a line, 3 points are sufficient to define a parabola, 4 points to define a cubic curve and so forth. That is, it takes $k$ points to define a polynomial of degree $k-1$. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Suppose we want to use a $( k , n )$ , threshold scheme to share our secret $S_{size}$, without loss of generality assumed to be an element in a finite field $\\mathbb{Z}_p$ of size $P$ where \n",
    "\n",
    "$$\n",
    "0 < k â‰¤ n < P; S < P; P \\in \\mathbb{P}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Choose at random $k-1$ positive integers $a_1,\\cdots, a_{k-1}$ with$a_i < P$, and let $a_0=S$. Build the polynomial \n",
    "\n",
    "$$\n",
    "f(x)=a_0+a_1x+a_2x^2+\\cdots+a_{k-1}x^{k-1}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us construct any $n$ points out of it, for instance set $i=1,\\cdots, n$ to retrive $(i, f(i))$. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Every participant is given a point (a non-zero integer input to the polynomial, and the corresponding integer output) along with the prime which defines the finite field to use. Given any subset of $k$ of these pairs, we can find the coefficients of the polynomial using interpolation. The secret is the constant term $a_0$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## SSSS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from klefki.const import SECP256K1_P as P\n",
    "from klefki.types.algebra.meta import field\n",
    "from operator import add\n",
    "\n",
    "import random\n",
    "\n",
    "N = 0xFFFFF\n",
    "random_f = lambda: CF(random.randint(1, N) % CF.P)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from operator import mul"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from functools import reduce\n",
    "from operator import add\n",
    "\n",
    "(k, n) = (66, 99)\n",
    "CF = field(P)\n",
    "S = random_f()\n",
    "P = CF.P"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "assert 0 < k <= n < P"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = [random_f() for _ in range(k-1)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "f = lambda x: S + reduce(\n",
    "    add, [CF(a[i]) * CF((x ** i)) for i in range(1, k - 1 )])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "rand = lambda: CF(random.randint(1, CF.P))\n",
    "\n",
    "x = [CF(rand()) for _ in range(k)]\n",
    "assert len(x) == k"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "ret = lambda x: reduce(add, [f(x[j]) * reduce(mul, \n",
    "    [x[m] / (x[m]-x[j])for m in range(k-1) if m != j]) for j in range(k-1)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ret([CF(rand()) for _ in range(k+20)]) == ret([CF(rand()) for _ in range(k)]) == S"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\n",
    "P = \\sum_{j=0}^{k-1}f(x_j)\\prod_{i=0;i\\neq j}^{k-1}\\frac{G^{x_m}}{G^{x_i}-G^{x_j}}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Implementation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "from klefki.crypto.ssss import SSSS\n",
    "from klefki.const import SECP256K1_P as P\n",
    "from klefki.types.algebra.utils import randfield\n",
    "from klefki.types.algebra.meta import field\n",
    "import random\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "F = field(P)\n",
    "s = SSSS(F)\n",
    "k = random.randint(1, 100)\n",
    "n = k * 3\n",
    "secret = randfield(F)\n",
    "\n",
    "s.setup(secret, k, n)\n",
    "\n",
    "assert s.decrypt([s.join() for _ in range(k - 1)]) != secret\n",
    "assert s.decrypt([s.join() for _ in range(k)]) == secret\n",
    "assert s.decrypt([s.join() for _ in range(k + 1)]) == secret\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Refs\n",
    "\n",
    "* Discusses about SSSS on ECDSA https://news.ycombinator.com/item?id=7981936\n",
    "\n",
    "* Shamir's Secret Sharing https://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
